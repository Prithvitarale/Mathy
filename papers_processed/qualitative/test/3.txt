arXiv:2003.04315v1
[cs.IR]
9
Mar
2020
Explanation-Based Tuning of Opaque Machine Learners
with Application to Paper Recommendation
Benjamin Charles Germain Lee1,2∗
Kyle Lo1
Doug Downey1
Daniel S. Weld1,2
1
Allen Institute for Artificial Intelligence
2
University of Washington
bcgl@cs.washington.edu, kylel@allenai.org, dougd@allenai.org, weld@cs.washington.edu
Abstract
Research in human-centered AI has shown the ben-
efits of machine-learning systems that can explain
their predictions. Methods that allow users to tune a
model in response to the explanations are similarly
useful. While both capabilities are well-developed
for transparent learning models (e.g., linear mod-
els and GA2
Ms), and recent techniques (e.g., LIME
and SHAP) can generate explanations for opaque
models, no method currently exists for tuning of
opaque models in response to explanations. This
paper introduces LIMEADE, a general framework
for tuning an arbitrary machine learning model
based on an explanation of the model’s prediction.
We apply our framework to Semantic Sanity,1
a
neural recommender system for scientific papers
and report on a detailed user study, showing that our
framework leads to significantly higher perceived
user control, trust, and satisfaction.
1 Introduction
Guidelines for human-AI interaction dictate that machine
learning (ML) systems should be able to explain their predic-
tions and accept corrections [5]. Both explanation and tuning
methods exist for transparent models, such as linear classi-
fiers or generalized additive models (GA2
Ms) [15]. But since
opaque models, such as boosted decision forests and deep
neural networks, often provide higher performance, many re-
searchers have developed methods for generating explana-
tions of an opaque ML model — typically creating a transpar-
ent approximation to the opaque model, called an explanatory
model [18]. While these explanatory models have seen signif-
icant adoption, the problem of interpreting user feedback re-
mains: how can one translate users’ requested changes, which
are expressed in terms of features in the explanatory model,
back into changes to the underlying opaque model?
In this paper, we present LIMEADE, a general technique
for tuning an arbitrary, opaque machine learning model in re-
sponse to feedback on an explanation of its behavior. As
∗
Work performed during internship at the Allen Institute for Ar-
tificial Intelligence and Ph.D. at the University of Washington.
1
https://s2-sanity.apps.allenai.org
Figure 1: An interpretable model such as a GA2
M (left) is by defi-
nition explainable and tunable [15]. With an opaque model (right),
methods such as LIME and SHAP enable the user to receive an ap-
proximate explanation; however, no such method enables the user
to tune the opaque model directly. LIMEADE provides this mecha-
nism, completing the loop.
shown in Figure 1, our approach builds upon explanatory ap-
proaches such as LIME [43] and SHAP [37] that describe the
behavior of a model local to a given instance. Given a trained
model and an instance to be classified, these post-hoc ap-
proaches output an explanation in the form of a weighted list
of the interpretable features (often distinct from the features
utilized in the opaque model) that influence the instance’s
classification. With LIMEADE, a user can then provide feed-
back on the explanation in order to tune the original, opaque
model. For example, suppose that a user is using a deep neu-
ral image classifier that consumes raw pixel values to predict
if an image contains a husky; suppose further that the ex-
planatory approach generates an explanation in terms of su-
perpixels [43]. A user may want to reinforce that a superpixel
containing a patch of grey fur is a positive indicator, but mark
the superpixel with snow as a spurious confound. LIMEADE
tunes the opaque model in response by retraining on pseudo-
examples, generated and labeled according to the user’s feed-
back on the explanation.
Since studies involving Mechanical Turk workers, who are
instructed to care about the ML model in question, can be
misleading, we instead evaluate LIMEADE with real users
who truly care about improving the accuracy of their ML
models. Specifically, we incorporated LIMEADE within
Semantic Sanity, a neural recommender for research papers
with hundreds of users, that enables users to curate feeds of
recent computer science research. Although Semantic Sanity
is powered by an opaque neural model, it explains recom-
mended papers by listing influential paper terms, and the
user can mark these terms as of interest or not. We evaluate
LIMEADE on the website through user studies and log stud-
ies. Our work reveals a fundamental tension between provid-
ing the most faithful explanations (by greedily selecting the
most influential features) and providing the best affordances
for tuning (by providing a variety of possible refinements).
We call this the explanation-action tradeoff.
In summary, our contributions are:
1. We introduce LIMEADE, a general framework that en-
ables a user to tune an arbitrary, opaque learning model
in response to an approximate explanation.
2. We apply LIMEADE by building Semantic Sanity, a
publicly-available computer science paper recommen-
dation platform that allows users to train, explain, and
adjust personalized research feeds.
3. Studying the logs of 300 users of Semantic Sanity, we
expose the explanation-action tradeoff, a tension be-
tween using canonical greedy explanation approaches
vs. providing a more diverse set of explanations with
better affordances for tuning.
4. Through a user study of Semantic Sanity with 21 par-
ticipants, we demonstrate that our implementation of
LIMEADE improves user perceived control, trust, and
satisfaction.
2 Previous Work
2.1 Explainability
Developing methods for understanding the reasons behind a
model’s classifications is an essential part of machine learn-
ing. Models such as linear models and decision trees benefit
from being intrinsically interpretable but are limited in per-
formance on many tasks. In contrast, opaque models such
as neural networks are ubiquitous due to high performance
but present difficulties precisely because they are difficult to
understand. Consequently, many approaches to explaining
opaque models have been proposed [18; 32]. Methods such
as LIME [43] and SHAP [37] have been developed in order to
provide post-hoc explanations by creating an approximate ex-
planatory model of the opaque model. However, these meth-
ods provide no affordances for tuning the opaque model in
response to an explanation.
2.2 Tunability
Research from interactive machine learning has shown the
benefits of enabling users to tune learning models [4; 3;
46]. For example, Lou et al. [35] and Lou et al. [36] have
demonstrated the value of GAMs and GA2
Ms, which can be
directly tuned by users via the alteration of shape functions.
Likewise, Kulesza et al. [30] has shown the power of explana-
tory debugging of models. However, this research has fo-
cused on transparent, interpretable models, where the models
can be tuned directly [54]. LIMEADE extends the paradigm
of interactive machine learning and tuning to opaque models.
Recommender systems are a highly-studied domain for ex-
plainability and interactivity due to the feedback loop essen-
tial to the task of recommendation [2; 20; 33; 41; 48; 49; 50;
53; 55]. Some recommender systems enable the user to tune
the system via affordances other than rating content [1; 7; 12;
13; 14; 17; 19; 24; 26; 28; 31; 38; 39; 45; 52]. Research
has shown that explanations can improve a user’s ability to
accurately assess how much they will enjoy recommended
content [11]. The combined affordances of actionability and
explainability can lead to a higher degree of user satisfaction
[22]; more trust in and perceived control of the system [16;
22; 40; 51]; and better mental models, without significantly
increasing the cognitive load [29; 30; 44]. However, all of
this work either relies on interpretable recommenders or in-
terprets tunability in an algorithmic-specific fashion that is
not extensible to an arbitrary opaque model. With our system
Semantic Sanity, we demonstrate the benefits of LIMEADE’s
affordance for tuning an arbitrary opaque model.
2.3 Academic Paper Recommendation
For our experiments, we have chosen to study LIMEADE
in the context of academic paper recommendation because
the influx of papers published daily presents a significant
challenge for researchers [10; 21; 25; 47]. Based on
Beel et al. [8]’s survey of over 170 publications on aca-
demic paper recommendation only a few systems explain
why papers have been recommended or respond to user feed-
back other than like/disliking specific papers, and all such
systems rely on interpretable recommenders [7; 26; 14; 51;
39]. In addition, according to [8], of the publications with
user evaluations, 58% report fewer than 15 participants, while
we have 21.
3 Tuning Opaque Models with LIMEADE
With LIMEADE, we assume that the user would like to tune
an opaque machine learning model. By opaque, we mean
that the model architecture may be completely unknown, or
(if known) it may have too many parameters and nonlinear-
ities for a human to understand. However, we assume that
the model’s inputs and outputs are available, and that it can
be retrained on new examples. We work in a semi-supervised
learning setting, in which the goal is to learn a hypothesis
that maps s-dimensional real-valued input vectors to binary
output labels {−1, 1}. We are given a set XL of labeled train-
ing examples (x, y, w), where x ∈ Rs
, y is the label to be
learned, and w is the weight assigned to the example when
training. Additionally, we optionally have a large, dense pool
XU of unlabeled examples (x).
Our explainable machine learning problem setting closely
follows that of previous work in explainable ML [43; 37].
First, we assume that each instance x can be represented as a
binary-valued vector x′
that lies in an interpretable space. For
the example of paper recommendation, x is an opaque doc-
ument embedding output by a large neural network, whereas
x′
is an interpretable vector of term occurrence statistics. In
an image classification task, the dimensions of x might con-
tain the raw RGB pixel values of the input image, whereas
the dimensions of x′
would correspond to larger, interpretable
Figure 2: LIMEADE updates an arbitrary opaque ML model by cre-
ating pseudo-examples. Small black o’s and +’s show the original
training set, and shaded regions denote the complex boundary of
the opaque classifier ft. In order to explain a prediction, h(x′
), the
system generates a locally faithful explanatory model using LIME
or an alternative method. This is gt — shown as a purple dotted
line. In practice, the explanatory model likely has many more than
the two dimensions shown above, but suppose ‘Turing’ and ‘agents’
are highly weighted terms, hence used in the explanation. When
the user specifies feature-level feedback, e.g., “I want more papers
about ‘agents”’, it could be used to directly alter a linear explanatory
model (creating the new purple dotted line gt+1); however, no sim-
ple update exists for an arbitrary, opaque classifier, which may be
nonlinear and use completely different features, such as word em-
beddings. Instead, LIMEADE generates positive pseudo-examples
(shown as blue +’s) that have the acted-upon feature and are sim-
ilar to the predicted example. The pseudo-examples are weighted
(shown by relative size) by their distance to the predicted example
x′
that was used to elicit feedback. By retraining on this augmented
dataset, LIMEADE produces a tuned opaque classifier, shown as a
changed nonlinear decision boundary ft+1.
image components such as superpixels. LIMEADE assumes
the existence of a function h′
(x) = x′
that maps the orig-
inal representation (e.g. pixels) into the interpretable space
(superpixels).
Given an instance x to explain, our approach uses an ex-
planatory model g in the interpretable space that locally ap-
proximates f, i.e., g(h′
(z)) ≈ f(z) for z′
nearby x′
. The
model g can be any interpretable model, such as a deci-
sion tree or linear model, produced using LIME or a com-
parable method. We refer to the method that produces g as
EXPLAIN(f, x, h′
). In our experiments, we use a linear ex-
planatory model, so g(x′
) = w0 +
P
i wix′
i, and the expla-
nation surfaced for g(x′
) consists of high-impact terms in the
model, i.e., those with high values for the product wix′
i.
Algorithm 1 details LIMEADE’s approach to model tun-
ing, and Figure 2 illustrates a concrete example of apply-
ing LIMEADE. Given an instance of interest, x, we ob-
tain an explanation g(x′
) of the model’s output f(x) using
EXPLAIN(f, x, h′
). The user can then provide a label on a
feature of x′
. Informally, a positive label on feature j of
x′
represents the user’s assessment that examples z′
near x′
should tend to be positive when z′
[j] = 1. For example, a
user of our paper recommendation system might give a posi-
tive label to the term “BERT” in a natural language process-
ing paper to indicate interest in papers about the technique.
LIMEADE incorporates the user’s action to improve the
opaque model f by creating a set of k training pseudo-
examples with repeated calls to GETINSTANCE(x, x′
, XU ).
We experiment with two implementations of GETINSTANCE:
sampling and generative. Sampling from the unlabeled pool
is effective when the unlabeled pool is relatively dense, mean-
ing one can acquire many examples with interpretable fea-
tures similar to those of x′
. Generative approaches can
be helpful when data are less dense. For example, in im-
age classification, LIMEADE could create synthetic pseudo-
examples by greying out random subsets of the superpixels
in the input image, essentially reversing LIME’s process for
generating the explanatory model, g.
LIMEADE only retains the pseudo-examples that contain
the acted-upon feature j, i.e. those x̃ for which h′
(x̃)[j] =
1. LIMEADE then assigns a label to each pseudo-example
according to the user action: positive if the user assigned a
positive feature label, and negative otherwise.
Algorithm 1 Tuning an opaque model using LIMEADE. Given
a set of required inputs, LIMEADE solicits user tuning based on an
explanation of a classified instance and retrains the opaque model
accordingly. EXPLAIN is a function that generates an explanation
for a given model and instance.
Inputs:
XL, XU // sets of labeled and unlabeled instances
ft : Rs
→ {−1, 1} // opaque classifier, version at time t
x ∈ Rs
, x′
∈ {0, 1}s′
// instance & instance in interpret. rep.
h′
: Rs
→ {0, 1}s′
// mapping s.t. x′
= h′
(x)
πx′ : {0, 1}s
→ R+ // weighting based on distance
k ∈ N // number of pseudo-examples
1: gt = EXPLAIN(ft, x, h′
) // obtain explanatory model
2: // display key features of gt(x′
) to user, who then selects one
feature (indexed j) as + or − indicator of positive instance
DISPLAY(gt, x′
)
3: receive a ∈ {−1, 1} and j ∈ {1, . . . , s′
}
4: // select k instances, label them using action a, and weight ac-
cording to distance from x′
Nx ← {}
5: for 1, . . . , k do
6: x̃ = GETINSTANCE(x,x′
, XU )
7: if h′
(x̃)[j] = 1 then
8: Nx ← Nx ∪ {(x̃, a, πx′ (h′
(x̃)))}
9: end if
10: end for
11: XL ← XL∪ Nx
12: ft+1 ← RETRAIN(XL, ft)
13: return ft+1
LIMEADE assigns each pseudo-example a weight based
on its proximity to x′
, with examples more similar to x′
given higher weight.2
The reasons to weight local examples
more highly are twofold: the explanatory method may only
2
We measure proximity in the interpretable space, but it is
equally possible to measure in the original space instead.
be locally correct [43], and the user actions may only be lo-
cally applicable. For example, the positive label on “BERT”
discussed above is helpful within the local scope of natu-
ral language processing papers, but could become mislead-
ing if applied globally—in biology papers for example, the
term “BERT” often refers to a different meaning (the “BERT
gene”). After selecting and weighting the pseudo-examples,
LIMEADE can optionally condense the selections (e.g., col-
lapsing the examples into a single centroid for efficiency, as
we do in our experiments). Finally, LIMEADE adds the re-
sulting pseudo-examples to the labeled training set XL and
calls RETRAIN to train the classifier f on the new data set.
To summarize, LIMEADE is a general approach for tuning
an opaque model that is applicable to an interactive machine
learning task whenever the following requirements are met:
1. A base (opaque) model. The only models not compatible
with LIMEADE are truly blackbox models, where the
user has no access to the training data or the ability to
retrain.
2. A transparent explanatory model (such as one produced
by LIME).
3. The ability to sample or generate instances with featur-
izations in both the base and explanatory models.
4. The ability to receive feedback on an explanatory model
feature, indicating whether it is a positive or negative
indicator of the instance label.
5. A distance metric between instances.
6. The ability to detect for a given instance the presence or
absence of each explanatory model feature that received
feedback in Step 4.
4 Semantic Sanity: Using LIMEADE to
Recommend Papers
To test LIMEADE, we wanted human users who were authen-
tically motivated to understand and improve an ML classifier.
Much prior research in explainable AI has relied on Mechani-
cal Turk workers, who are instructed to ‘care’ about the qual-
ity of explanations, but whose motivations are typically un-
verified. Instead, we built Semantic Sanity, a computer sci-
ence (CS) research-paper recommender system based on An-
drej Karpathy’s arXiv Sanity Preserver [27]. Deployed as a
publicly-available platform, Semantic Sanity enables users to
curate feeds from over 150,000 CS papers recently published
on arXiv.org. With this testbed, users are implicitly incen-
tivized to understand and improve the ML model that powers
their feed in order to receive more interesting papers. Note
further that each user is a task expert, since they determine
their own preferences.
4.1 Neural Recommender
To generate individual recommendations, we utilize a neu-
ral model consisting of a linear SVM on top of neural paper
embeddings pre-trained on a similar papers task. Each pa-
per is represented by the first vector (i.e., the [CLS] token
typically chosen for text classification) after encoding the pa-
per title and abstract using SciBERT [9]. The neural embed-
ding model is finetuned on a triplet loss L = max(0, vT
i v+ −
Figure 3: The UI for a feed in Semantic Sanity. Under each paper,
the system presents four terms to explain why it was recommended
and solicits feedback with “Rate Paper Topics”: by clicking thumbs
up or down, the user can request that the feed include more or less
of the specified topic.
vT
i v− + m) where m is a margin hyperparameter and vi, v+
and v− are the vectors representing a query paper, a similar
paper to the query paper, and a dissimilar paper to the query
paper, respectively. The similar paper triples are heuristically
defined using citations, from the SEMANTIC SCHOLAR cor-
pus [6] treating cited papers as more similar than un-cited pa-
pers. Recommendations are generated by training the model
on a user’s annotation history, with additional negative ex-
amples randomly drawn from the full corpus of unannotated
papers.
A user begins the process of curating their feed by either
selecting a specific arXiv CS category or issuing a keyword
search and then rating a handful of the resulting papers. A
feed consists of a list of recommended papers sorted by pre-
dicted recommendation score (see Figure 3). Each paper can
be rated using traditional “More like this” or “Less like this”
buttons underneath each paper description.
4.2 Implementation of Explanations and Feedback
Our UI for Semantic Sanity uses LIMEADE to display four
terms from the paper text along with each recommended pa-
per, which serve as the explanation for why the paper was
recommended. To the left of each term in the explanation are
thumbs-up and thumbs-down buttons, enabling the user to act
on the explanation and indicate if they would like to see more
or fewer papers related to that term.
For our EXPLAIN function, we train a simple, linear ex-
planatory model using uni- and bigram features.3
We discuss
how LIMEADE chooses which terms to display as the expla-
nation in Section 4.3. Furthermore, next to each explanatory
term are thumbs up and down buttons (see Figure 3). When
the user provides feedback with these buttons, LIMEADE
generates pseudo-examples and retrains the neural model as
3
Specifically, we select the 20,000 features with the highest term
frequency across our corpus. Note that our approach of using a post-
hoc explanatory model is similar to that used by LIME, except our
explanatory model is trained as a global, rather than local, approxi-
mation of the neural model [43].
explained in Section 3. We use a generative approach within
GETINSTANCE that leverages the unlabeled pool of papers.
We select the top 100 papers from the full corpus with the
highest TF-IDF value for the feedback term, and generate a
single synthetic pseudoexample (i.e., we use k = 1) equal
to the centroid of these papers’ embeddings. The example
is appended to the user’s history and labeled with the user’s
annotation of the term (+/-).
4.3 Generating Diverse Explanations
Given the explanatory model, LIMEADE’s DISPLAY func-
tion chooses explanations to display by computing each
term’s contribution to the output of the linear model for the
given paper, which is equal to the product of the term’s TF-
IDF value for the paper with the term’s feature weight in the
linear model. The canonical explanation choice is to surface
the terms with the highest-magnitude contributions in the lin-
ear model [43]; we call this a greedy approach. However,
comments from early users of our paper recommender indi-
cated that there is a tradeoff between using the greedy ap-
proach and providing affordances for feedback. In particular,
user action on a feature will lead the model to place increasing
importance on it and correlated features. With the greedy ap-
proach, these terms will begin to dominate the explanations,
which limits opportunities for feedback. On the other hand,
a diversity-biased strategy would present more unique terms
to provide more opportunities for feedback, but would conse-
quently diverge from using the terms with the highest contri-
butions to the explanatory model.
Figure 4: A scatter plot showing the number of unique explanation
terms in the first page of the feed vs. the number of actions taken
by the user to tune their feed. The orange dots correspond to the
diversity-biased explanations currently used in the system. The blue
dots correspond to greedy explanations, where the most important
terms are surfaced, without stochasticity. Note that greedy explana-
tions display a stronger negative correlation between unique terms
and term annotations than diversity-biased explanations.
Based on this feedback, our final implementation of DIS-
PLAY uses a diversity-biased approach that samples explana-
tory features controlled by a parameter γ = 4. Specifically,
we sample terms proportionally to the magnitude of term con-
tribution, raised to the γ power (higher values of γ result
in a more greedy approach, whereas lower values increase
diversity). To further reduce term redundancy in each rec-
ommended paper’s explanation, we used the Python NLTK
PorterStemmer [34] to deduplicate terms with the same stems
(e.g., “fair” and “fairness”) from each explanation.
To help illustrate the impact of the explanation-action
tradeoff, and the distinction between our diversity-biased ap-
proach and the canonical greedy method, we perform an anal-
ysis on the logs of 300 users’ feeds from the online deploy-
ment of Semantic Sanity. For each user, we compute (i) the
total number of actions the user has taken on displayed ex-
planatory terms, and (ii) the number of unique explanation
terms among the latest top eight recommended papers under
our diversity-biased DISPLAY implementation. We then re-
peat (ii) but with DISPLAY with γ = ∞ to simulate what
explanatory terms the users would see today if we were to
switch to a greedy approach.
In accordance with the explanation-action tradeoff, we ob-
serve in Figure 4 that the number of unique explanation terms
(i.e. tuning affordances) tends to be lower under a greedy ap-
proach. Furthermore, this effect grows stronger as users tune
their feeds to be increasingly specific to a particular topic.4
In contrast, the number of affordances remains relatively con-
stant under our diversity-biased approach. This comes at the
expense of having some explanation terms with lower contri-
bution weight within the explanatory model.
5 Evaluation: User Study
In order to evaluate the effectiveness of our LIMEADE-based
system for recommending papers, we performed an in-person
user study.
5.1 Experimental Setup
We recruited 21 participants through the University of Wash-
ington’s computer science email lists. All participants were
adults who reported experience with reading computer sci-
ence research papers in our screening questionnaire. Each
session lasted one hour, and each participant was compen-
sated with a $25 gift card.
Subjects were asked to curate feeds of computer science
papers pertaining to a topic of their choice using two dif-
ferent recommendation user interfaces (UIs), one that used
LIMEADE to provide tunable explanations, and one that did
not present explanations (the baseline); other than this differ-
ence, the UIs were the same. Subjects were asked to choose a
topic that they were interested in following over time as new
papers are added to the arXiv, but not so general that it is
already covered by an existing arXiv CS category (e.g., artifi-
cial intelligence). Once a topic was selected, each participant
4
We note that Figure 4 likely understates the impact of the
tradeoff because users had been exposed to explanations under the
diversity-biased approach prior to this analysis. Had they been ex-
posed to explanations under the greedy approach for the entirety of
their feed-tuning process, we likely would observe an even stronger
crowding-out effect on the explanatory terms.
was asked to name the desired feed, which served as the goal
for curation using both UIs.
Each participant began curation as described in Section 4.1,
selecting exactly three seed papers that were then used to ini-
tialize the feeds in both UIs. Both systems surfaced the same
initial recommendations and thus had identical initial states
for each participant. Each participant was then presented with
one of the two UIs and given instructions on how to use it.
11 participants received the baseline system first, and 10 re-
ceived the LIMEADE system first. They were then presented
with the second UI. For both UIs, the participants were told to
use as many or as few annotations as desired until their feed
was curated to their liking, or a maximum of 10 minutes was
reached. We recorded the participants’ annotations for both
feeds. They were then asked to rate a blind list of combined
recommendations from the two feeds that they had curated,
according to whether they would like to see each paper in
their desired feed. These recommendations were generated
on a held-out paper corpus, disjoint from the papers available
within the feed UIs.
5.2 Quantitative results
Data was successfully collected for all 21 participants. The
participants’ chosen topics varied greatly, including “Spik-
ing Neural Networks,” “Moderation of Online Communities,”
and “Dialogue System Evaluation.”
We asked each participant to provide overall ratings for
each system, and to state which system they preferred along
dimensions such as trust and intuitiveness. The results are
summarized in Tables 1 and 2.5
Which system... Baseline Ours p-value
...trust more? 4 17 0.043
...more control? 0 21 ≈0
...more transparent? 3 18 0.012
...more intuitive? 12 9 0.664
...not missing relevant papers? 3 18 0.012
Table 1: Among 21 participants, most prefer our system over the
baseline when prompted these questions. Boldface indicates a sta-
tistically significant result under a two-sided Binomial test against a
null hypothesis of no preference.
Likert scale rating Baseline Ours p-value
Overall system 3.38 ± 0.59 3.85 ± 0.57 0.043
Would use again? 3.38 ± 1.16 3.90 ± 0.94 0.257
Table 2: Mean ± Standard Deviation of 21 participant ratings of
each system. Ratings were on a scale from 1 (worst/no) to 5
(best/yes). Boldface indicates a statistically significant result un-
der a two-sided paired t-test against a null hypothesis of zero mean
difference between the systems.
5
For all statistical significance tests, we report adjusted p-values
using the Holm-Bonferroni procedure for multiple comparisons [23]
implemented in the P.ADJUST library in R [42].
Overall, participants rated our approach significantly
higher than the baseline. They also rated it significantly
higher on trust, control, and transparency, and in confidence
that their recommendations were not missing relevant papers.
Understandably, our system appeared less intuitive to partic-
ipants than the baseline due to the increased complexity of
the UI, though this result was not statistically significant. Fi-
nally, while not statistically significant due to small sample
size, participants indicated more likelihood to use our system
again over the baseline.
We also investigated whether the feature-level feedback
provided by LIMEADE measurably increased the quality of
particpants’ feed. To do this we showed participants the top
20 recommendations generated by both systems on the held-
out corpus of papers and measured their ratings of the re-
sults. Specifically, we computed the discounted cumulative
gain (DCG)6
and average precision (AP), common metrics
for assessing recommendation feed quality. For DCG, we
observe a mean difference of 0.259 in favor of the baseline
system recommendations; however, the corrected p-value for
the two-sided, paired t-test for mean differences is 0.218, in-
dicating no significant difference in feed quality between the
baseline system and the tunable system with LIMEADE un-
der DCG. For AP, we observe a mean difference of 0.0412
in favor of the baseline system, with a corrected p-value of
0.257, also indicating lack of significant difference in quality
with respect to AP.
5.3 Qualitative feedback
We analyze participants’ free text responses and provide a
sample of quotes that complement the quantiative results.
Overall, participants found the tuning affordance granted by
our system helpful:
“The explanations here were especially useful in
their capacity as decisions rather than just expla-
nations. I would have found them really really an-
noying if they were presented only as an explana-
tion of why you thought I would like a paper, rather
than an attribute I could ask for more or less of.”
In particular, participants stressed the importance of action-
able explanations as a filtering mechanism:
“The topics feature was excellent, because there
are many papers which cover *some* topics I like
but also some that I don’t, and this let me pick that
out.”
Some participants indicated a preference for an even more
diversity-biased system:
“After a few minutes, almost all the same terms that
I had liked were coming up, so there were few new
terms for me to thumbs up or down. I think if the
system could focus on bringing up relevant papers
that have a new term or two to which I can react,
that would make the curation even better.”
6
We did not use normalized discounted cumulative gain (NDCG)
because the participants liked different numbers of papers.
6 Conclusion & Future Work
To our knowledge, LIMEADE is the first general frame-
work for tuning an arbitrary opaque learning model based on
feedback corresponding to an approximate explanation. Us-
ing our implementation of LIMEADE for Semantic Sanity,
a publicly-available computer science research paper recom-
mender, we conducted a user study and showed that partici-
pants strongly prefer our tunable system over the baseline ac-
cording to metrics such as trust, perceived control, and overall
satisfaction.
In future work, we intend to experiment with LIMEADE
on other domains, such as image data, in order to further eval-
uate the effectiveness of our method.
There are also interesting questions about the interplay be-
tween the perceived quality of an approximate explanation
and the ability (or inability) to tune such a model — does
LIMEADE cause users to better trust explanations, such as
those produced by LIME?
Finally, as more online users adopt our recommender tool,
it will become increasingly important to experiment with as-
pects of LIMEADE that benefit from personalization. For
example, we could grant users more control over the expla-
nation diversity parameter γ and the relative strength of each
tuning adjustment upon retraining.
Acknowledgments
The authors would like to thank Sam Skjonsberg and Daniel
King for their help in setting up the initial Semantic Sanity
prototype; Matt Latzke for his interface design work; Chelsea
Haupt and Sebastian Kohlmeier for their management of plat-
form development; Alex Schokking for his work on scaling
Semantic Sanity for public launch; Arman Cohan and Sergey
Feldman for providing the neural paper embeddings; Yogi
Chandrasekhar and Chris Wilhelm for their guidance with im-
plementing LIMEADE for Semantic Sanity; Chris Wilhelm
for his help in implementing functionality necessary for the
user study; and Iz Beltagy and Jonathan Bragg for their help-
ful feedback. We would also like to thank Andrej Karpathy
for his arXiv Sanity Preserver platform, which served as the
basis for Semantic Sanity. Lastly, we thank the many users of
Semantic Sanity for their feedback. This material is based
upon work supported by the National Science Foundation
Graduate Research Fellowship under Grant DGE-1762114,
by ONR grant N00014-18-1-2193,the WRF/Cable Professor-
ship, and the Allen Institute for Artificial Intelligence (AI2).
References
[1] Jae-wook Ahn, Peter Brusilovsky, Jonathan Grady,
Daqing He, and Sue Yeon Syn. Open user profiles for
adaptive news systems: Help or harm? In Proceed-
ings of the 16th International Conference on World Wide
Web, WWW ’07, pages 11–20, New York, NY, USA,
2007. ACM.
[2] Jae-wook Ahn, Peter Brusilovsky, and Shuguang Han.
Personalized search: Reconsidering the value of open
user models. In Proceedings of the 20th Interna-
tional Conference on Intelligent User Interfaces, IUI
’15, pages 202–212, New York, NY, USA, 2015. ACM.
[3] Saleema Amershi, Maya Cakmak, William Bradley
Knox, and Todd Kulesza. Power to the People: The
Role of Humans in Interactive Machine Learning. AI
Magazine, 35(4):105–120, December 2014.
[4] Saleema Amershi, James Fogarty, and Daniel Weld.
Regroup: Interactive machine learning for on-demand
group creation in social networks. In Proceedings of the
SIGCHI Conference on Human Factors in Computing
Systems, CHI ’12, pages 21–30, New York, NY, USA,
2012. ACM.
[5] Saleema Amershi, Dan Weld, Mihaela Vorvoreanu,
Adam Fourney, Besmira Nushi, Penny Collisson, Jina
Suh, Shamsi Iqbal, Paul N. Bennett, Kori Inkpen, and
et al. Guidelines for human-ai interaction. In Proceed-
ings of the 2019 CHI Conference on Human Factors
in Computing Systems, CHI ’19, New York, NY, USA,
2019. Association for Computing Machinery.
[6] Waleed Ammar, Dirk Groeneveld, Chandra Bhagavat-
ula, Iz Beltagy, Miles Crawford, Doug Downey, Ja-
son Dunkelberger, Ahmed Elgohary, Sergey Feldman,
Vu Ha, Rodney Kinney, Sebastian Kohlmeier, Kyle
Lo, Tyler C. Murray, Hsu-Han Ooi, Matthew E. Pe-
ters, Joanna Power, Sam Skjonsberg, Lucy Lu Wang,
Christopher Wilhelm, Zheng Yuan, Madeleine van
Zuylen, and Oren Etzioni. Construction of the literature
graph in semantic scholar. In NAACL-HLT, 2018.
[7] Fedor Bakalov, Marie-Jean Meurs, Birgitta König-Ries,
Bahar Sateli, René Witte, Greg Butler, and Adrian
Tsang. An approach to controlling user models and per-
sonalization effects in recommender systems. In Pro-
ceedings of the 2013 International Conference on Intel-
ligent User Interfaces, IUI ’13, pages 49–56, New York,
NY, USA, 2013. ACM.
[8] Joeran Beel, Bela Gipp, Stefan Langer, and Corinna
Breitinger. Research-paper recommender systems: a
literature survey. International Journal on Digital Li-
braries, 17(4):305–338, November 2016.
[9] Iz Beltagy, Kyle Lo, and Arman Cohan. Scibert: A pre-
trained language model for scientific text. In Proceed-
ings of the 2019 Conference on Empirical Methods in
Natural Language Processing, 2019.
[10] Chandra Bhagavatula, Sergey Feldman, Russell Power,
and Waleed Ammar. Content-based citation recommen-
dation. In Proceedings of the 2018 Conference of the
North American Chapter of the Association for Com-
putational Linguistics: Human Language Technologies,
Volume 1 (Long Papers), pages 238–251, New Orleans,
Louisiana, June 2018. Association for Computational
Linguistics.
[11] Mustafa Bilgic and Raymond J. Mooney. Explaining
recommendations: Satisfaction vs. promotion. In Pro-
ceedings of Beyond Personalization 2005: A Workshop
on the Next Stage of Recommender Systems Research at
the 2005 International Conference on Intelligent User
Interfaces, San Diego, CA, January 2005.
[12] Svetlin Bostandjiev, John O’Donovan, and Tobias
Höllerer. Tasteweights: A visual interactive hybrid
recommender system. In Proceedings of the Sixth
ACM Conference on Recommender Systems, RecSys
’12, pages 35–42, New York, NY, USA, 2012. ACM.
[13] Svetlin Bostandjiev, John O’Donovan, and Tobias
Höllerer. LinkedVis: exploring social and semantic
career recommendations. In Proceedings of the 2013
international conference on Intelligent user interfaces
- IUI ’13, page 107, Santa Monica, California, USA,
2013. ACM Press.
[14] Simon Bruns, André Calero Valdez, Christoph Greven,
Martina Ziefle, and Ulrik Schroeder. What Should I
Read Next? A Personalized Visual Publication Recom-
mender System. In Sakae Yamamoto, editor, Human
Interface and the Management of Information. Informa-
tion and Knowledge in Context, pages 89–100, Cham,
2015. Springer International Publishing.
[15] Rich Caruana, Yin Lou, Johannes Gehrke, Paul Koch,
Marc Sturm, and Noémie Elhadad. Intelligible models
for healthcare: Predicting pneumonia risk and hospital
30-day readmission. In KDD, 2015.
[16] Henriette Cramer, Vanessa Evers, Satyan Ramlal,
Maarten van Someren, Lloyd Rutledge, Natalia Stash,
Lora Aroyo, and Bob Wielinga. The effects of trans-
parency on trust in and acceptance of a content-based
art recommender. User Modeling and User-Adapted In-
teraction, 18(5):455, August 2008.
[17] Brynjar Gretarsson, John O’Donovan, Svetlin Bostand-
jiev, Christopher Hall, and Tobias Höllerer. Small-
worlds: Visualizing social recommendations. Computer
Graphics Forum, 29(3):833–842, 2010.
[18] Riccardo Guidotti, Anna Monreale, Salvatore Ruggieri,
Franco Turini, Fosca Giannotti, and Dino Pedreschi.
A survey of methods for explaining black box models.
ACM Comput. Surv., 51(5), August 2018.
[19] F. Maxwell Harper, Funing Xu, Harmanpreet Kaur,
Kyle Condiff, Shuo Chang, and Loren Terveen. Putting
Users in Control of their Recommendations. In Pro-
ceedings of the 9th ACM Conference on Recommender
Systems - RecSys ’15, pages 3–10, Vienna, Austria,
2015. ACM Press.
[20] Chen He, Denis Parra, and Katrien Verbert. Interactive
recommender systems: A survey of the state of the art
and future research challenges and opportunities. Expert
Systems with Applications, 56:9–27, September 2016.
[21] Qi He, Jian Pei, Daniel Kifer, Prasenjit Mitra, and Lee
Giles. Context-aware citation recommendation. In Pro-
ceedings of the 19th International Conference on World
Wide Web, WWW ’10, pages 421–430, New York, NY,
USA, 2010. ACM.
[22] Jonathan L. Herlocker, Joseph A. Konstan, and John
Riedl. Explaining collaborative filtering recommen-
dations. In Proceedings of the 2000 ACM confer-
ence on Computer supported cooperative work - CSCW
’00, pages 241–250, Philadelphia, Pennsylvania, United
States, 2000. ACM Press.
[23] Sture Holm. A simple sequentially rejective multi-
ple test procedure. Scandinavian Journal of Statistics,
6(2):65–70, 1979.
[24] Yucheng Jin, Nava Tintarev, and Katrien Verbert. Ef-
fects of personal characteristics on music recommender
systems with different levels of controllability. In Pro-
ceedings of the 12th ACM Conference on Recommender
Systems - RecSys ’18, pages 13–21, Vancouver, British
Columbia, Canada, 2018. ACM Press.
[25] Anshul Kanakia, Zhihong Shen, Darrin Eide, and
Kuansan Wang. A scalable hybrid research paper rec-
ommender system for microsoft academic. In The World
Wide Web Conference, WWW ’19, pages 2893–2899,
New York, NY, USA, 2019. ACM.
[26] Antti Kangasrääsiö, Dorota Glowacka, and Samuel
Kaski. Improving controllability and predictability of
interactive recommendation interfaces for exploratory
search. In Proceedings of the 20th International Con-
ference on Intelligent User Interfaces, IUI ’15, pages
247–251, New York, NY, USA, 2015. ACM.
[27] Andrej Karpathy. Arxiv sanity preserver. 2015.
[28] Bart P. Knijnenburg, Niels J.M. Reijmer, and Martijn C.
Willemsen. Each to his own: How different users call
for different interaction methods in recommender sys-
tems. In Proceedings of the Fifth ACM Conference
on Recommender Systems, RecSys ’11, pages 141–148,
New York, NY, USA, 2011. ACM.
[29] T. Kulesza, S. Stumpf, M. Burnett, S. Yang, I. Kwan,
and W. Wong. Too much, too little, or just right?
ways explanations impact end users’ mental models. In
2013 IEEE Symposium on Visual Languages and Hu-
man Centric Computing, pages 3–10, Sep. 2013.
[30] Todd Kulesza, Margaret Burnett, Weng-Keen Wong,
and Simone Stumpf. Principles of explanatory debug-
ging to personalize interactive machine learning. In Pro-
ceedings of the 20th International Conference on Intel-
ligent User Interfaces, IUI ’15, pages 126–137, New
York, NY, USA, 2015. ACM.
[31] Todd Kulesza, Simone Stumpf, Margaret Burnett, and
Irwin Kwan. Tell me more?: the effects of mental model
soundness on personalizing an intelligent agent. In Pro-
ceedings of the 2012 ACM annual conference on Hu-
man Factors in Computing Systems - CHI ’12, page 1,
Austin, Texas, USA, 2012. ACM Press.
[32] Himabindu Lakkaraju, Ece Kamar, Rich Caruana, and
Jure Leskovec. Interpretable & explorable approxi-
mations of black box models. arXiv:1707.01154 [cs],
2017. arXiv: 1707.01154.
[33] Benedikt Loepp, Catalin-Mihai Barbu, and Jürgen
Ziegler. Interactive Recommending: Framework, State
of Research and Future Challenges. In Proceedings
of the 1st Workshop on Engineering Computer-Human
Interaction in Recommender Systems (EnCHIReS ’16),
pages 3–13, 2016.
[34] Edward Loper and Steven Bird. Nltk: The natural lan-
guage toolkit. In In Proceedings of the ACL Workshop
on Effective Tools and Methodologies for Teaching Nat-
ural Language Processing and Computational Linguis-
tics. Philadelphia: Association for Computational Lin-
guistics, 2002.
[35] Yin Lou, Rich Caruana, and Johannes Gehrke. Intelligi-
ble models for classification and regression. In Proceed-
ings of the 18th ACM SIGKDD International Confer-
ence on Knowledge Discovery and Data Mining, KDD
’12, page 150–158, New York, NY, USA, 2012. Associ-
ation for Computing Machinery.
[36] Yin Lou, Rich Caruana, Johannes Gehrke, and Giles
Hooker. Accurate intelligible models with pairwise in-
teractions. In Proceedings of the 19th ACM SIGKDD
International Conference on Knowledge Discovery and
Data Mining, KDD ’13, page 623–631, New York, NY,
USA, 2013. Association for Computing Machinery.
[37] Scott M Lundberg and Su-In Lee. A unified approach
to interpreting model predictions. In I. Guyon, U. V.
Luxburg, S. Bengio, H. Wallach, R. Fergus, S. Vish-
wanathan, and R. Garnett, editors, Advances in Neural
Information Processing Systems 30, pages 4765–4774.
Curran Associates, Inc., 2017.
[38] John O’Donovan, Barry Smyth, Brynjar Gretarsson,
Svetlin Bostandjiev, and Tobias Höllerer. Peerchooser:
Visual interactive recommendation. In Proceedings of
the SIGCHI Conference on Human Factors in Comput-
ing Systems, CHI ’08, pages 1085–1088,New York, NY,
USA, 2008. ACM.
[39] Denis Parra and Peter Brusilovsky. User-controllable
personalization: A case study with SetFusion. Interna-
tional Journal of Human-Computer Studies, 78:43–67,
June 2015.
[40] Pearl Pu and Li Chen. Trust building with explana-
tion interfaces. In Proceedings of the 11th Interna-
tional Conference on Intelligent User Interfaces, IUI
’06, pages 93–100, New York, NY, USA, 2006. ACM.
[41] Pearl Pu, Li Chen, and Rong Hu. A user-centric evalua-
tion framework for recommender systems. In Proceed-
ings of the Fifth ACM Conference on Recommender Sys-
tems, RecSys ’11, pages 157–164, New York, NY, USA,
2011. ACM.
[42] R Core Team. R: A Language and Environment for Sta-
tistical Computing. R Foundation for Statistical Com-
puting, Vienna, Austria, 2018.
[43] Marco Tulio Ribeiro, Sameer Singh, and Carlos
Guestrin. ”why should i trust you?”: Explaining the
predictions of any classifier. In Proceedings of the 22nd
ACM SIGKDD International Conference on Knowledge
Discovery and Data Mining, KDD ’16, pages 1135–
1144, New York, NY, USA, 2016. ACM.
[44] Stephanie L. Rosenthal and Anind K. Dey. Towards
Maximizing the Accuracy of Human-Labeled Sensor
Data. In Proceedings of the International Conference
on Intelligent User Interfaces, pages 259–268, 2010.
[45] James Schaffer, Tobias Höllerer, and John O’Donovan.
Hypothetical recommendation: A study of interactive
profile manipulation behavior for recommender sys-
tems, 2015.
[46] Patrice Y. Simard, Saleema Amershi, David M. Chicker-
ing, Alicia Edelman Pelton, Soroush Ghorashi, Christo-
pher Meek, Gonzalo Ramos, Jina Suh, Johan Verwey,
Mo Wang, and John Wernsing. Machine Teaching:
A New Paradigm for Building Machine Learning Sys-
tems. arXiv:1707.06742 [cs, stat], July 2017. arXiv:
1707.06742.
[47] Arnab Sinha, Zhihong Shen, Yang Song, Hao Ma, Dar-
rin Eide, Bo-June (Paul) Hsu, and Kuansan Wang. An
overview of microsoft academic service (mas) and ap-
plications. In Proceedings of the 24th International
Conference on World Wide Web, WWW ’15 Compan-
ion, pages 243–246, New York, NY, USA, 2015. ACM.
[48] Nava Tintarev and Judith Masthoff. Designing and
Evaluating Explanations for Recommender Systems. In
Francesco Ricci, Lior Rokach, Bracha Shapira, and
Paul B. Kantor, editors, Recommender Systems Hand-
book, pages 479–510. Springer US, Boston, MA, 2011.
[49] Chun-Hua Tsai and Peter Brusilovsky. Beyond the
ranked list: User-driven exploration and diversification
of social recommendation. In 23rd International Con-
ference on Intelligent User Interfaces, IUI ’18, pages
239–250, New York, NY, USA, 2018. ACM.
[50] Chun-Hua Tsai and Peter Brusilovsky. Explaining rec-
ommendations in an interactive hybrid social recom-
mender. In Proceedings of the 24th International Con-
ference on Intelligent User Interfaces, IUI ’19, pages
391–396, New York, NY, USA, 2019. ACM.
[51] Katrien Verbert, Denis Parra, Peter Brusilovsky, and
Erik Duval. Visualizing recommendations to support
exploration, transparency and controllability. In Pro-
ceedings of the 2013 International Conference on In-
telligent User Interfaces, IUI ’13, pages 351–362, New
York, NY, USA, 2013. ACM.
[52] Jesse Vig, Shilad Sen, and John Riedl. The Tag
Genome: Encoding Community Knowledge to Support
Novel Interaction. ACM Transactions on Interactive In-
telligent Systems, 2(3):1–44, September 2012.
[53] Annika Wærn. User Involvement in Automatic Filter-
ing: An Experimental Study. User Modeling and User-
Adapted Interaction, 14(2):201–237, June 2004.
[54] Daniel S. Weld and Gagan Bansal. The challenge
of crafting intelligible intelligence. Commun. ACM,
62(6):70–79, May 2019.
[55] Yongfeng Zhang and Xu Chen. Explainable Rec-
ommendation: A Survey and New Perspectives.
arXiv:1804.11192[cs], April 2018. arXiv: 1804.11192.
